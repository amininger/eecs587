sp {count-epmem*propose*testing
   (state <s> ^name count-epmem
              ^mode testing
              ^counter <ct>
              ^max {<> <ct>})
-->
   (<s> ^operator <op> + =)
   (<op> ^name testing)
}

sp {apply*testing*copy-symbolic
   (state <s> ^operator <op>
              ^episode <ep>
              ^convert-result <r>
              ^epmem.command <cmd>)
   (<op> ^name testing)
-->
   (<cmd> ^query <q>)
   (<q> ^symbolic <sym>)
   (<sym> ^episode <ep>
          ^converted <c>)
}

sp {apply*testing*copy-result*cue
   (state <s> ^operator <op>
              ^convert-result.<digit-name> <digit>
              ^epmem.command.query.symbolic.converted <c>
             -^lti t)
   (<op> ^name testing)
   (<digit> ^cue <digit-cue>)
-->
   (<c> ^<digit-name> <digit-cue>)
}

sp {apply*testing*copy-result*lti
   (state <s> ^operator <op>
              ^convert-result.<digit-name> <digit>
              ^epmem.command.query.symbolic.converted <c>
              ^lti t)
   (<op> ^name testing)
-->
   (<c> ^<digit-name> <digit>)
}

sp {apply*testing*next
   (state <s> ^operator <op>
              ^epmem <epmem>
              ^convert-result <r>
              ^counter <ct>)
   (<op> ^name testing)
   (<epmem> ^command <cmd>
            ^result.graph-match 1)   
   (<cmd> ^query <q>)
-->
   (<s> ^convert-result <r> -
        ^counter <ct> - (+ <ct> 1))
   (<cmd> ^query <q> -)
}

sp {apply*testing*next*increment
   (state <s> ^operator <op>
              ^epmem.result.graph-match 1
              ^test-mode increment
              ^episode <ep>)
   (<op> ^name testing)
-->
   (<s> ^episode <ep> - (+ <ep> 1))
}

