/////////////////////////////////////////////////////////////////
// watch command file.
//
// Author: Jonathan Voigt, voigtjr@gmail.com
// Date  : 2004
//
/////////////////////////////////////////////////////////////////

#include <portability.h>

#include "sml_Utils.h"
#include "cli_CommandLineInterface.h"

#include "cli_Commands.h"

#include "sml_Names.h"

#include "sml_KernelSML.h"
#include "gsysparam.h"
#include "misc.h"
#include "agent.h"
#include "sml_AgentSML.h"

using namespace cli;
using namespace sml;

bool CommandLineInterface::DoWatch(const WatchBitset& options, const WatchBitset& settings, const int wmeSetting, const int learnSetting) 
{
    agent* agnt = m_pAgentSML->GetSoarAgent();
    if (options.none()) 
    {
        // Print watch settings.
        int learning;
        if (!agnt->sysparams[TRACE_CHUNK_NAMES_SYSPARAM] 
            && !agnt->sysparams[TRACE_CHUNKS_SYSPARAM] 
            && !agnt->sysparams[TRACE_JUSTIFICATION_NAMES_SYSPARAM] 
            && !agnt->sysparams[TRACE_JUSTIFICATIONS_SYSPARAM]) 
        {
            learning = 0;
        } 
        else if (agnt->sysparams[TRACE_CHUNK_NAMES_SYSPARAM] 
            && !agnt->sysparams[TRACE_CHUNKS_SYSPARAM] 
            && agnt->sysparams[TRACE_JUSTIFICATION_NAMES_SYSPARAM] 
            && !agnt->sysparams[TRACE_JUSTIFICATIONS_SYSPARAM])
        {
            learning = 1;
        } 
        else 
        {
            learning = 2;
        }


        if (m_RawOutput) 
        {
            m_Result << "Current watch settings:\n  Decisions:  " << (agnt->sysparams[TRACE_CONTEXT_DECISIONS_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Phases:  " << (agnt->sysparams[TRACE_PHASES_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Default productions:  " << (agnt->sysparams[TRACE_FIRINGS_OF_DEFAULT_PRODS_SYSPARAM] ? "on" : "off");
            m_Result << "\n  User productions:  " << (agnt->sysparams[TRACE_FIRINGS_OF_USER_PRODS_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Chunks:  " << (agnt->sysparams[TRACE_FIRINGS_OF_CHUNKS_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Justifications:  " << (agnt->sysparams[TRACE_FIRINGS_OF_JUSTIFICATIONS_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Templates:  " << (agnt->sysparams[TRACE_FIRINGS_OF_TEMPLATES_SYSPARAM] ? "on" : "off");
            m_Result << "\n    WME detail level:  ";

            switch (agnt->sysparams[TRACE_FIRINGS_WME_TRACE_TYPE_SYSPARAM])
            {
                default://falls through                    
                case NONE_WME_TRACE:
                    m_Result << "nowmes (0)";
                    break;
                case TIMETAG_WME_TRACE:
                    m_Result << "timetags (1)";
                    break;
                case FULL_WME_TRACE:
                    m_Result << "fullwmes (2)";
                    break;
            }

            m_Result << "\n  Working memory changes:  " << (agnt->sysparams[TRACE_WM_CHANGES_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Preferences generated by firings/retractions:  " << (agnt->sysparams[TRACE_FIRINGS_PREFERENCES_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Learning:  ";

            switch (learning) 
            {
                default://falls through
                case 0:
                    m_Result << "noprint (0)";
                    break;
                case 1:
                    m_Result << "print (1)";
                    break;
                case 2:
                    m_Result << "fullprint (2)";
                    break;
            }
            m_Result << "\n  Backtracing:  " << (agnt->sysparams[TRACE_BACKTRACING_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Indifferent selection:  " << (agnt->sysparams[TRACE_INDIFFERENT_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Soar-RL:  " << (agnt->sysparams[TRACE_RL_SYSPARAM] ? "on" : "off");
            m_Result << "\n  Waterfall:  " << (agnt->sysparams[TRACE_WATERFALL_SYSPARAM] ? "on" : "off");
            m_Result << "\n  EpMem:  " << (agnt->sysparams[TRACE_EPMEM_SYSPARAM] ? "on" : "off");
            m_Result << "\n  SMem:  " << (agnt->sysparams[TRACE_SMEM_SYSPARAM] ? "on" : "off");
			m_Result << "\n  WMA:  " << (agnt->sysparams[TRACE_WMA_SYSPARAM] ? "on" : "off");
            m_Result << "\n  GDS:  " << (agnt->sysparams[TRACE_GDS_SYSPARAM] ? "on" : "off");

        } 
        else 
        {
            std::string temp;
            AppendArgTag(sml_Names::kParamWatchDecisions, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_CONTEXT_DECISIONS_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchPhases, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_PHASES_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchProductionDefault, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_FIRINGS_OF_DEFAULT_PRODS_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchProductionUser, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_FIRINGS_OF_USER_PRODS_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchProductionChunks, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_FIRINGS_OF_CHUNKS_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchProductionJustifications, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_FIRINGS_OF_JUSTIFICATIONS_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchProductionTemplates, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_FIRINGS_OF_TEMPLATES_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            // Subtract one here because the kernel constants (e.g. TIMETAG_WME_TRACE) are one plus the number we use
            AppendArgTag(sml_Names::kParamWatchWMEDetail, sml_Names::kTypeInt, 
                to_string(agnt->sysparams[TRACE_FIRINGS_WME_TRACE_TYPE_SYSPARAM]-1, temp));

            AppendArgTag(sml_Names::kParamWatchWorkingMemoryChanges, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_WM_CHANGES_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchPreferences, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_FIRINGS_PREFERENCES_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchLearning, sml_Names::kTypeInt, 
                to_string(learning, temp));

            AppendArgTag(sml_Names::kParamWatchBacktracing, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_BACKTRACING_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchIndifferentSelection, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_INDIFFERENT_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchRL, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_RL_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchWaterfall, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_WATERFALL_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);
            
            AppendArgTag(sml_Names::kParamWatchEpMem, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_EPMEM_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchSMem, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_SMEM_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

			AppendArgTag(sml_Names::kParamWatchWMA, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_WMA_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);

            AppendArgTag(sml_Names::kParamWatchGDS, sml_Names::kTypeBoolean, 
                agnt->sysparams[TRACE_GDS_SYSPARAM] ? sml_Names::kTrue : sml_Names::kFalse);
        }

        return true;
    }

    // No watch level and no none flags, that means we have to do the rest
    if (options.test(WATCH_BACKTRACING)) 
        set_sysparam(agnt, TRACE_BACKTRACING_SYSPARAM, settings.test(WATCH_BACKTRACING));

    if (options.test(WATCH_CHUNKS))
        set_sysparam(agnt, TRACE_FIRINGS_OF_CHUNKS_SYSPARAM, settings.test(WATCH_CHUNKS));

    if (options.test(WATCH_DECISIONS)) 
        set_sysparam(agnt, TRACE_CONTEXT_DECISIONS_SYSPARAM, settings.test(WATCH_DECISIONS));

    if (options.test(WATCH_DEFAULT)) 
        set_sysparam(agnt, TRACE_FIRINGS_OF_DEFAULT_PRODS_SYSPARAM, settings.test(WATCH_DEFAULT));

    if (options.test(WATCH_GDS))
        set_sysparam(agnt, TRACE_GDS_SYSPARAM, settings.test(WATCH_GDS));

    if (options.test(WATCH_INDIFFERENT))
        set_sysparam(agnt, TRACE_INDIFFERENT_SYSPARAM, settings.test(WATCH_INDIFFERENT));

    if (options.test(WATCH_RL))
        set_sysparam(agnt, TRACE_RL_SYSPARAM, settings.test(WATCH_RL));
    
    if (options.test(WATCH_EPMEM)) 
        set_sysparam(agnt, TRACE_EPMEM_SYSPARAM, settings.test(WATCH_EPMEM));

    if (options.test(WATCH_JUSTIFICATIONS))
        set_sysparam(agnt, TRACE_FIRINGS_OF_JUSTIFICATIONS_SYSPARAM, settings.test(WATCH_JUSTIFICATIONS));

    if (options.test(WATCH_TEMPLATES))
        set_sysparam(agnt, TRACE_FIRINGS_OF_TEMPLATES_SYSPARAM, settings.test(WATCH_TEMPLATES));

    if (options.test(WATCH_PHASES))
        set_sysparam(agnt, TRACE_PHASES_SYSPARAM, settings.test(WATCH_PHASES));

    if (options.test(WATCH_PREFERENCES))
        set_sysparam(agnt, TRACE_FIRINGS_PREFERENCES_SYSPARAM, settings.test(WATCH_PREFERENCES));

    if (options.test(WATCH_SMEM))
        set_sysparam(agnt, TRACE_SMEM_SYSPARAM, settings.test(WATCH_SMEM));

    if (options.test(WATCH_USER))
        set_sysparam(agnt, TRACE_FIRINGS_OF_USER_PRODS_SYSPARAM, settings.test(WATCH_USER));

    if (options.test(WATCH_WMES))
        set_sysparam(agnt, TRACE_WM_CHANGES_SYSPARAM, settings.test(WATCH_WMES));

    if (options.test(WATCH_WATERFALL))
        set_sysparam(agnt, TRACE_WATERFALL_SYSPARAM, settings.test(WATCH_WATERFALL));

	if (options.test(WATCH_WMA)) 
        set_sysparam(agnt, TRACE_WMA_SYSPARAM, settings.test(WATCH_WMA));

    if (options.test(WATCH_LEARNING)) 
    {
        switch (learnSetting)
        {
            default:
                // falls through
            case 0:
                set_sysparam(agnt, TRACE_CHUNK_NAMES_SYSPARAM, false);
                set_sysparam(agnt, TRACE_CHUNKS_SYSPARAM, false);
                set_sysparam(agnt, TRACE_JUSTIFICATION_NAMES_SYSPARAM, false);
                set_sysparam(agnt, TRACE_JUSTIFICATIONS_SYSPARAM, false);
                break;
            case 1:
                set_sysparam(agnt, TRACE_CHUNK_NAMES_SYSPARAM, true);
                set_sysparam(agnt, TRACE_CHUNKS_SYSPARAM, false);
                set_sysparam(agnt, TRACE_JUSTIFICATION_NAMES_SYSPARAM, true);
                set_sysparam(agnt, TRACE_JUSTIFICATIONS_SYSPARAM, false);
                break;
            case 2:
                set_sysparam(agnt, TRACE_CHUNK_NAMES_SYSPARAM, true);
                set_sysparam(agnt, TRACE_CHUNKS_SYSPARAM, true);
                set_sysparam(agnt, TRACE_JUSTIFICATION_NAMES_SYSPARAM, true);
                set_sysparam(agnt, TRACE_JUSTIFICATIONS_SYSPARAM, true);
                break;
        }
    }

    if (options.test(WATCH_WME_DETAIL))
    {
        switch (wmeSetting) 
        {
            default:
                // falls through
            case 0:
                set_sysparam(agnt, TRACE_FIRINGS_WME_TRACE_TYPE_SYSPARAM, NONE_WME_TRACE);
                break;
            case 1:
                set_sysparam(agnt, TRACE_FIRINGS_WME_TRACE_TYPE_SYSPARAM, TIMETAG_WME_TRACE);
                break;
            case 2:
                set_sysparam(agnt, TRACE_FIRINGS_WME_TRACE_TYPE_SYSPARAM, FULL_WME_TRACE);
                break;
        }
    }

    return true;
}
